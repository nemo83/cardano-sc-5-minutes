import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import {
  Address,
  Assets,
  Cip30Handle,
  Cip30Wallet,
  ConstrData,
  Datum,
  MintingPolicyHash,
  NetworkParams,
  Program,
  Tx,
  TxId,
  TxOutput,
  UTxO,
  Value,
  WalletHelper
} from "@hyperionbt/helios"
import { useEffect, useState } from 'react'

const inter = Inter({ subsets: ['latin'] })

const contract = `

  spending vault

  struct Datum {
    pubKey: PubKeyHash

    func is_valid_key(self, tx: Tx) -> Bool {
      tx.is_signed_by(self.pubKey)
    }
  }

  func main(datum: Datum, scriptContext: ScriptContext) -> Bool {
      tx: Tx = scriptContext.tx;
      datum.is_valid_key(tx)
  }


`

declare global {
  interface Window {
    cardano: any;
  }
}

export default function Home() {

  const [scriptAddress, setScriptAddress] = useState('')

  const [walletApi, setWalletApi] = useState<Cip30Wallet>()

  const [networkParams, setNetworkParams] = useState<NetworkParams>()

  const [policyId, setPolicyId] = useState('')
  const [assetName, setAssetName] = useState('')

  const [vaultUtxo, setVaultUtxo] = useState('')
  const [vaultUtxoId, setVaultUtxoId] = useState(0)

  useEffect(() => {

    (async () => {
      const handle: Cip30Handle = await window.cardano.nami.enable()
      const walletApi = new Cip30Wallet(handle)
      setWalletApi(walletApi)
      console.log('wallet initialised')
    })()


    fetch('https://d1t0d7c2nekuk0.cloudfront.net/preview.json')
      .then(response => response.json())
      .then(params => setNetworkParams(new NetworkParams(params)))

    const program = Program.new(contract)
    const uplcProgram = program.compile(false)
    const scriptAddress = Address.fromValidatorHash(uplcProgram.validatorHash)
    setScriptAddress(scriptAddress.toBech32())
  }, [])

  const sendNftToScript = async () => {

    const program = Program.new(contract)
    const uplcProgram = program.compile(false)
    const scriptAddress = Address.fromValidatorHash(uplcProgram.validatorHash)

    const mph = MintingPolicyHash.fromHex(policyId)
    const assetNameHex = Buffer.from(assetName).toString("hex")
    const value = new Value(BigInt(2_000_000), new Assets([
      [mph, [[assetNameHex, BigInt(1)]]]
    ]))

    if (walletApi && networkParams) {

      console.log(networkParams)

      const walletHelper = new WalletHelper(walletApi)
      const baseAddress = await walletHelper.baseAddress
      const utxos = await walletHelper.pickUtxos(value)

      const datum = new program.types.Datum(baseAddress.pubKeyHash)

      const tx = await new Tx()
        .addInputs(utxos[0])
        .addOutput(new TxOutput(scriptAddress, value, Datum.inline(datum)))
        .addSigner(baseAddress.pubKeyHash)
        .finalize(networkParams, await walletHelper.changeAddress, utxos[1])

      console.log('tx.dump', tx.dump())

      const signatures = await walletApi.signTx(tx)
      tx.addSignatures(signatures)

      const txHash = await walletApi.submitTx(tx)
      console.log('txHash', txHash)

    }

  }

  const withdrawNft = async () => {

    const program = Program.new(contract)
    const uplcProgram = program.compile(false)
    const scriptAddress = Address.fromValidatorHash(uplcProgram.validatorHash)

    const mph = MintingPolicyHash.fromHex(policyId)
    const assetNameHex = Buffer.from(assetName).toString("hex")
    const value = new Value(BigInt(2_000_000), new Assets([
      [mph, [[assetNameHex, BigInt(1)]]]
    ]))

    if (walletApi && networkParams && vaultUtxo) {

      console.log(networkParams)

      const walletHelper = new WalletHelper(walletApi)
      const baseAddress = await walletHelper.baseAddress
      const utxos = await walletHelper.pickUtxos(new Value(BigInt(2_000_000)))

      const datum = new program.types.Datum(baseAddress.pubKeyHash)

      const tx = await new Tx()
        .addInputs(utxos[0])
        .addInput(new UTxO(new TxId(vaultUtxo), BigInt(vaultUtxoId), new TxOutput(scriptAddress, value, Datum.inline(datum))), new ConstrData(0, []))
        .addOutput(new TxOutput(baseAddress, value))
        .addSigner(baseAddress.pubKeyHash)
        .attachScript(uplcProgram)
        .finalize(networkParams, await walletHelper.changeAddress)

      console.log('tx.dump', tx.dump())

      const signatures = await walletApi.signTx(tx)
      tx.addSignatures(signatures)

      const txHash = await walletApi.submitTx(tx)
      console.log('txHash', txHash)

    }

  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div>
          <p>
            <h3>Script Address: {scriptAddress}</h3>
          </p>
        </div>
        <div>
          <p>
            <h2>Lock NFT in Vault</h2>
          </p>
          <ul>
            <li>Open Nami and select the asset's Policy ID and paste it in the appropriate field</li>
            <li>Same for the Asse Name</li>
            <li>Don't delete them, you'll need them to bake the withdraw transaction</li>
            <li>Open your console to check for errors</li>
          </ul>
          <input type={'text'} value={policyId} onChange={(event) => setPolicyId(event.target.value)} placeholder="Policy ID"></input>
          <input type={'text'} value={assetName} onChange={(event) => setAssetName(event.target.value)} placeholder="Asset Name"></input>
          <input type={'button'} value="Send" onClick={() => sendNftToScript()}></input>
        </div>
        <div>
          <p>
            <h2>Withdraw NFT from Vault</h2>
          </p>
          <ul>
            <li>To withdraw the assets from the vault, you need the utxo and utxo id of the contract</li>
            <li>Use the script address at the top of the page and paste it into preview.cardanoscan.io</li>
            <li>Open the utxo tab and fetch relevant utxos and paste them here below. Hit the withdraw button and GL.</li>
          </ul>
          <input type={'text'} value={vaultUtxo} onChange={(event) => setVaultUtxo(event.target.value)} placeholder="utxo"></input>
          <input type={'text'} value={vaultUtxoId} onChange={(event) => setVaultUtxoId(Number(event.target.value))} placeholder="utxo index"></input>
          <input type={'button'} value="Withdraw" onClick={() => withdrawNft()}></input>
        </div>
      </main>
    </>
  )
}
